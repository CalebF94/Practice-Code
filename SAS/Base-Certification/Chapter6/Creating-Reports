/*
Chapter 6: Creating Reports

From the certified specialist prep book  
*/

LIBNAME cert '/home/u45038867/cert';

/*The most basic report*/
PROC PRINT data=cert.therapy;
RUN;


/*
An example demonstrating the use of the noobs option
and the var statement 
*/
PROC PRINT data=cert.admit noobs;*OBS column will not be shown;
	var age height weight fee;*table will have 4 columns;
RUN;


/*
An example illustrating the use of the ID and VAR statements together
Notice how the IDnum gets printed twice b/c it appears in the ID
statement and the VAR statement  
*/
PROC PRINT data=cert.reps;
	ID IDnum LastName;
	VAR IDnum Sex JobCode Salary;
RUN;

/*
Example demonstating the usage of the WHERE Statement  

Notice how the first where statement is ignored
*/
PROC PRINT data=cert.admit;
	VAR age height weight fee;
	WHERE fee > 130;
	WHERE age > 30;
RUN;


/*
Using OBS and FIRSTOBS statements

First a basic example using the global OBS statement
*/

OPTIONS OBS=10; *Only the first 10 obs are printed. This option affects subsequent steps;
PROC PRINT data=cert.heart;
RUN;

*resetting OBS and specifying we only want to print the first 10 observations;
OPTIONS OBS=max FIRSTOBS=10;
PROC PRINT data=cert.heart;
RUN;


*You can also set OBS and FIRSTOBS to print an intermediate range of observations
Notice you don't get 15 obs you get observations 5 through 15;
OPTIONS FIRSTOBS=5 OBS=15;
PROC PRINT data=cert.heart;
RUN;

/*
Specifying OBS and FIRSTOBS for a single data set  

Notice the global options haven't been changed. 
We'll specify the options in parenthesis directly after the dataset name
*/
PROC PRINT data=cert.heart (FIRSTOBS=3 OBS=8);
RUN;

OPTIONS OBS=max FIRSTOBS=min;

/*
Sorting SAS datasets

The following example sorts a data set by weight and age.
PROC SORT doesn't generate output so we have to use PRINT procedure
after to show results
*/
PROC SORT data=cert.admit out=work.wgtadmit;
	BY DESCENDING weight age;
RUN;

PROC PRINT data=work.wgtadmit;
	VAR weight age height fee;
	WHERE age>30;
RUN;


/*
Below is an example of the SUM statement inside a PRINT procedure  
*/
PROC PRINT data=cert.insure;
	var name policy; *Notice that balancedue still prints even though not specified here;
	where pctinsured < 100;
	sum balancedue; *finding the total balance due for all observations;
RUN;


* here is an example of using the SUM and BY statements to creat subtotals for each
group of the BY variable;
PROC SORT data=cert.admit out=work.activity;
	BY actlevel;
RUN;

PROC PRINT data=work.activity;
	var age height weight fee;
	where age>30;
	sum fee;
	by actlevel;*Different tables will be made for each group;
RUN;

*If the by group isn't sorted each contiguous group is treated as its own group;
PROC PRINT data=work.activity;
	var age height weight fee;
	where age>30;
	sum fee;
	by age NOTSORTED; *This generates lots of small groups and some of the groups repeat;
RUN;

*The following example uses the sum, by, and id state to clean up and reduce the 
duplication of some information for the BY variable;
PROC SORT data=cert.admit out=work.activity;
	by actlevel;
RUN;

PROC PRINT data=work.activity;
	var age height weight fee;
	where age>30;
	sum fee;
	by actlevel;
	id actlevel;*Notice that the BY and ID variables are the same;
RUN;


/*
The following example shows the use of the pageby statement 

The BY and PAGEBY variables are the same. You will get an error if the PAGEBY
variable isn't in the BY variable list
*/
PROC SORT data=cert.admit out=work.activity;
	by actlevel;
RUN;

PROC PRINT data=work.activity;
	var age height weight fee;
	where age>30;
	sum fee;
	by actlevel;
	id actlevel;
	pageby actlevel;*note that the BY variable and PAGEBY variables are the same;
RUN;



/*
Below is a basic example of using the TITLE and FOOTNOTE statements

Notice how multiple Titles/footnotes are used and that a line is skipped
if that N is not used  
*/
TITLE "Heart Rate for Patients with:";
*TITLE2 is not used so there is a blank line;
TITLE3 "Increased Stress Tolerance Levels:";
FOOTNOTE "Data from Treadmill Test";
FOOTNOTE2 "1st Quarter Admissions";
PROC PRINT data=cert.stress;
	var resthr maxhr rechr;
	where tolerance="I";
RUN;

* This example demononstrates how we can change a TITLE but keep others. 
TITLE, FOOTNOTE, and FOOTNOTE are global so they won't change from the 
previous step;
TITLE3 "Decreased Stress Tolerance Levels:";
PROC PRINT data=cert.stress;
	var resthr maxhr rechr;
	where tolerance="I";
RUN;

* However if we redine FOOTNOTE1 we lose FOOTNOTE2. Redefining higher ranked 
TITLES/FOOTNOTES affects the TITLES/FOOTNOTES of lower rank;
FOOTNOTE1 "Data from March";
PROC PRINT data=cert.stress;
	var resthr maxhr rechr;
	where tolerance="I";
RUN;


* To clear all footnotes or headers run a null TITLE or FOOTNOTE statement;
TITLE1;
PROC PRINT data=cert.stress;
	var resthr maxhr rechr;
	where tolerance="I";
RUN;

*Clearing all Titles and footnotes;
TITLE; FOOTNOTE;


/*
Below is an example of using the LABEL Statement and Option in PROC PRINT  

The LABEL option is needed in the definition to successfully print the new labels
*/

PROC PRINT data=cert.therapy label;
	label walkjogrun="Walk/Jog/Run";
RUN;

*When the label option isn't included in the PROC statement the labels aren't applied;
PROC PRINT data=cert.therapy;
	label walkjogrun="Walk/Jog/Run";
RUN;


/*
You can also apply multiple labels in a single LABEL statement  
*/
PROC PRINT data=cert.admit label;
	var actlevel height weight;
	label actlevel="Activity Level"
		  height="Height in Inches"
		  weight="Weight in Pounds";
RUN;

/*
This example creates a SAS dataset and creates a permanent label for it.

We can then use those labels in a subsequent PRINT procedure  
*/
DATA cert.paris;
	set cert.laguardia;
	where dest="PAR" and (boarded=155 or boarded=146);
	label date="Departure Date";
RUN;

PROC PRINT data=cert.paris label;
	var date dest boarded; *Notice we still refer to the variable name not the label;
RUN;
