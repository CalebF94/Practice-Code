/*
Chapter 9: Working with Macro Programs

	Topics:
		- Defining and Calling a Macro
		- Passing Information into a Macro Using Parameters
		- Controlling Variable Scope
		- Debugging Macros
		- Conditional Processing
		- Iterative Processiong
		- Quiz
*/

LIBNAME certadv '/home/u45038867/certadv';

*Creating temp data to populate &syslast macro variable;
DATA work.cars_msrp;
	set sashelp.cars;
RUN;



/*******************************
* Defining and Calling a Macro *
********************************/

%MACRO printit; *printit is the name of the macro;
	PROC PRINT data=&syslast (obs=5);
		TITLE "Listing of &syslast dataset";
	RUN;
%MEND printit; *adding the macro name at the end makes code more readable;

%printit;



*Using the MCOMPILENOTE= option;

OPTIONS MCOMPILENOTE=all;*setting the global option;
%MACRO printit;
	PROC PRINT data=&syslast (obs=5);
		TITLE "Listing of &syslast dataset";
	RUN;
%MEND printit;

OPTIONS MCOMPILENOTE=NONE;*Resetting option to default;


* Calling a macro;
PROC SORT data=sashelp.cars out=cars_mpg;
	by MPG_City;
RUN;

*Calling the print it macro;
%printit




/****************************************************
* Passing Information into a Macro Using Parameters *
*****************************************************/
*Using Positional Parameters to Create Macro Variables;
*Defining a macro with two positional arguments: dsn and vars;
%MACRO printdsn(dsn, vars);
	PROC PRINT data=&dsn;
		VAR &vars;
		TITLE "Listing of %upcase(&dsn) data set";
	RUN;
%MEND;

*notice how multiple 'vars' are passed in;
%printdsn(certadv.courses, course_code course_title days)


*Using Keyword Parameters to Create Macro Variables;

%MACRO printdsn(dsn = certadv.courses,
				vars= course_code course_title days);
	PROC PRINT data=&dsn;
		VAR &vars;
		TITLE "Listing of %upcase(&dsn) data set";
	RUN;
	
%MEND;

*Calling the printdsn() macro with default values;
%printdsn()

*Calling the printdsn() macro with different values;
%printdsn(vars=teacher course_code begin_date, dsn=certadv.schedule)



*Using mixed parameters to create macro variables;
%MACRO PRINTDSN(dsn, vars=course_title course_code days);
	PROC PRINT data=&dsn;
		VAR &vars;
		TITLE "Listing of %UPCASE(&dsn) data set";
	RUN;

%MEND;

*schedule is a positional arg, vars is a keyword argument;
%PRINTDSN(certadv.schedule, vars=teacher location begin_date)



/*****************************
* Controlling Variable Scope *
******************************/

/* Using the %GLOBAL Statement */
%MACRO PRINTDSN;
	*Creating null macro variables;
	%GLOBAL dsn vars;
	
	*Assigning values to the macro variables;
	%LET dsn=certadv.courses;
	%LET vars = course_title course_code days;

	PROC PRINT data=&dsn;
		var &vars;
		TITLE "Listing of &dsn dataset";
	RUN;
%MEND PRINTDSN;

%PRINTDSN


/*Using the %LOCAL Statement*/
%LET dsn=certadv.courses;

%MACRO printdsn;
	%LOCAL dsn;
	%let dsn=certadv.register;
	%put The value of DSN inside Printdsn is &dsn;
%MEND;

%PRINTDSN
%PUT the value of DSN outside PRINTDSN is &dsn;
	



/*******************************
* Debugging Macro              *
********************************/

/*Using the MPRINT Option*/

*Making a macro;
%MACRO prtlast;
	PROC PRINT data=&syslast (obs=5);
		TITLE "Listing of &syslast data set";
	RUN;
%MEND prtlast;

*creating a dataset to populatethe syslast varible;
DATA sales;
	price_code=1;
RUN;

*Turning on the MPRINT option and running the macro;
OPTIONS MPRINT;
%prtlast;


/*******************************
* Conditional Processing       *
********************************/


/*Example using %IF-%THEN, %DO-%END with IF-THEN statements*/
DATA work.sports;
	SET sashelp.cars;
	WHERE Type="Sports";
	AvgMPG=mean(MPG_city, MPG_Highway);
RUN;

%IF &syserr ne 0 %THEN 
	%DO;
		%PUT ERROR: The Rest of the Program will not execute;
	%END;
%ELSE 
	%DO;
		TITLE "Sports Cars";
		PROC PRINT data=work.sports noobs;
			VAR Make Model AvgMPG MSRP;
		RUN;
	%END;

/*Example: Controlling Text Copied to the Input Stack*/
%MACRO CHOICE(status);
	DATA fees;
		SET certadv.all;
		%IF &status=PAID %THEN 
			%DO;
				where paid='Y';
				keep student_name course_code begin_Date totalfee;
			%END;
		%ELSE 
			%DO;
				WHERE paid='N';
				KEEP student_name course_code begin_date totalfee latechg;
				latechg=fee*.10;
			%END;
			
		IF Location='Boston' THEN totalfee=fee*1.06;
		ELSE IF location='Seattle' THEN totalfee=fee*1.025;
		ELSE IF location='Dallas' THEN totalfee=fee*1.05;
	RUN;
%MEND CHOICE;

/*Turning on options to display messages in SAS log*/
OPTIONS mprint mlogic;
%CHOICE(PAID)


%CHOICE(OWED)


/*The MLOGIC System Option*/;
DATA SALES;
	price_code=1;
RUN;

OPTIONS NOMPRINT MLOGIC;
%prtlast



/***********************
* Iterative Processing *
************************/;

OPTIONS NOMLOGIC;
PROC SQL noprint;
	SELECT teacher
		/* Creating a Series of Macro variables*/
		INTO :teach1-
		FROM certadv.schedule;
QUIT;


%MACRO PUTLOOP;
	%LOCAL i;
	%DO i=1 %to &sqlobs %by 1;
		%put TEACH&i is &&teach&i;
	%END;
	
%MEND;

%putloop


*Creating a Roster for each class;
%MACRO rosters;
	%DO class=1 %to 18;
		TITLE "Roster for Class #&class";
		PROC PRINT data=certadv.all;
			where Course_Number=&class;
		RUN;
	%END;
%MEND;

%rosters
