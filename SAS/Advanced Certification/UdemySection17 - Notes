/* 
Section 17: Advanced Techniques: Formats & Arrays

	Lectures:
		121) Creating Custom Formats Using the PICTURE Statement
		122) Stored Custom Formats permanently & Manage it with FMTSEARCH= system option
		123) Use Formats to create data via lookups
		124) Using the ARRAY Statement to Combine Data
		125) Processing Data with Multiple Dimensional Arrays

*/

/* Lecture 121: Creating Custom Formats Using the Picture Statement

Value statement can associate a text label with a discrete numeric or character value

Use the PICTURE statement to create a template for printing numbers(think $12,232.98)

General Format:
	PROC FORMAT;
		PICTURE format-name
			value-or-range='picture'
			
	RUN;
	
Picture are specified with 3 types of characters:
	1) digit selectores: are numerals (0 through 9) that define positions for numbers.
		Using nonzero digit selectors will add zeros to the formatted value as needed. 
		Zeros as digit selectors will not add leading zeros to formatted value
	
	2) message characters: non-numeric characters that are printed as specified in the 
			picture. Inserted into the picture after the numeric digits are formatted.
			Digit selectors must come before message characters in the picture defn.
	
	3) Directives: special characters for date, time or datetime values. must specify the
	       DATATYPE= option
*/


%LET home=/home/u45038867/Udemy-AdvancedSAS/Data;

DATA PHONE;
	INPUT phone_number;
	DATALINES;
4089813212
3427893456
7896542231
4123467863
6457845632
;
RUN;

*We will format the numbers as (###)###-####;
PROC FORMAT;
	PICTURE phone_f (default=20)/*default length for pictue is 20*/
		low-high = '999) 999-9999 Cell'/*low-high: format will apply to all non-missing values*/
		(prefix = '(');*prefix has to come after digit selectors;
RUN;

PROC PRINT data=phone;
	format phone_number phone_f.;*Apply just like a format;
RUN;


*Use directives to give birthday a new format: Mar 12, 1999;
PROC IMPORT datafile = "&home/score_data_miss_birthdate.xlsx"
	DBMS=xlsx
	out = bd (keep=name birthdate)
	replace;
RUN;

PROC FORMAT;
	PICTURE bd_f (default=20)
		low-high = '%b %d, %Y' (datatype=date);
RUN;

PROC PRINT data=bd;
	FORMAT birthdate bd_f.;
RUN;



/* 
123) Use Formats to create data via lookups

FORMAT procedure uses a binary search method

Lookup/return value: The data value or values that are retrieved from the lookup table
or tables during a horizonatal combination. Sometimes lookup values that are not stored
in a SAS data set. You can use techniques to hardcode lookup values into your program
*/

DATA teacherid;
INPUT tid;
DATALINES;
201
202
203
204
;
RUN;

*THe following PROC FORMAT step uses a VALUE statement to hardcode the lookup value
in the BIRTHDATAE format;
PROC FORMAT;
	VALUE birthdate 201='01JAN1980'
					 202='08AUG1971'
					 203='23MAR1965'
					 204='17JUN1973';
RUN;


*This DATA step uses the PUT function to associate the birthday lookup values format with
the values tid. It is a process of numeric to character conversion;
* The INPUT function associates the lookup value with the DATE9. informat, and assigns the
formatted values to a new variable named Birthdate;

DATA teacherid_b;
	SET teacherid;
	
	*Creating a new column using numeric to character conversion;
	B_C=PUT(tid, birthdate.);
	
	*Creating a new column using character to numeric conversion;
	Birthdate_n=INPUT(B_C, date9.);
	
	*Assigning a format to the numeric variable;
	FORMAT Birthdate_n date7.;
	
RUN;

/*
124) Using the ARRAY Statement to Combine Data
 
We can hardcode the lookup values using ARRay to combine data
*/

DATA teacherid;
INPUT tid;
DATALINES;
201
202
203
204
;
RUN;

*Bring in teacher birthday info;

DATA teacherid_d;
	SET teacherid;
	
	* we will use the array statement to create a temporary array;
	ARRAY bd{201:204} _temporary_ ('01JAN1980'd, '08AUG1971'd, '23MAR1965'd, '17JUN1973'd);

	*Assignment statement that retrieves the birthdate from the array;
	Birthdate=bd{tid};
	FORMAT Birthdate date7.;
RUN;



/*
125) Processing Data with Multiple Dimensional Arrays

To define multi-dimensional array, specify the number of elements in each dimension separated
by a comma.
	- ARRAY new{3,4} x1-x12;
The first dimension specifies the number or rows. The second dimension specifies the 
number of columns

Reference an element by specifying the two dimensions in parenthesis
	-new(2,3)
*/

PROC IMPORT datafile="&home/monthly.xlsx"
	dbms=xlsx
	out=monthly
	replace;
RUN;

*We want to create a new dataset with quarterly sales rather than months;
DATA quarters(drop=i j);
	SET monthly;
	array m{4,3} month1-month12;
	
	array qtr{4};
	
	DO i=1 to 4;
		qtr{i} = 0;
		DO j=1 to 3;
			qtr{i} = qtr{i} + m{i,j};
		END;
	END;
RUN;
		
PROC PRINT data=quarters (keep = year qtr1-qtr4);
	TITLE "Quarterly Sales";
RUN;




