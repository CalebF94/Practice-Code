######################################################################################################################
## 175: Write an SQL query to report the first name, last name, city, and state of each person in the Person table. ## 
##  If the address of a personId is not present in the Address table, report null instead.                          ##
######################################################################################################################
SELECT P.firstname, P.lastname, A.city, A.state
FROM 
    person P LEFT JOIN address A
    ON P.personid = A.personid


#####################################################
## 181: Employees Earning More than their managers ##
#####################################################
SELECT 
    e1.name Employee
FROM 
    employee e1 INNER JOIN employee man
    ON e1.managerid = man.id
WHERE e1.salary > man.salary

############################################################
## 182: Duplicate Emails                                  ##
## Write an SQL query to report all the duplicate emails. ##
############################################################
SELECT 
    email
FROM 
    Person
GROUP BY 
    email
HAVING 
    count(email)>1

##########################################################################
## 183: Customers Who Never Order                                       ##
## Write an SQL query to report all customers who never order anything. ##
##########################################################################
SELECT 
    C.name Customers
FROM
    Customers C LEFT JOIN Orders O
    ON C.id = O.customerid
GROUP BY 
    C.id
HAVING
    count(O.id) = 0


###################################################################################################
## 196: Delete Duplicate Email                                                                   ##
## Write an SQL query to delete all the duplicate emails, keeping only one unique email with the ## 
## smallest id. Note that you are supposed to write a DELETE statement and not a SELECT one.     ##
###################################################################################################
DELETE p1
FROM person p1, person p2
WHERE
    p1.id > p2.id AND p1.email = p2.email
    
####################################################################################    
## 197: Rising Temperature                                                        ##
## Write an SQL query to find all dates' Id with higher temperatures compared to  ##
## its previous dates (yesterday).                                                ##
####################################################################################
SELECT w1.id
FROM 
    weather w1 INNER JOIN weather w2
    ON DATEDIFF(w1.recordDate, w2.recordDate)=1
WHERE w1.temperature > w2.temperature


##############################################################################################
## 176: Second highest Salary                                                               ##
## Write an SQL query to report the second highest salary from the Employee table. If there ## 
## is no second highest salary, the query should report null.                               ##
##############################################################################################

## I have to return a temporary table to ensure I get NULL if there is only one distinct salary
SELECT
    (SELECT DISTINCT(salary)
    FROM employee
    ORDER BY salary DESC
    LIMIT 1, 1
    ) as SecondHighestSalary

#######################################################################################
## 584: Find Customer Referee                                                        ##
## Write an SQL query to report the IDs of the customer that are not referred by the ##
## customer with id = 2                                                              ##
########################################################################################
SELECT name
FROM customer
WHERE referee_id <> 2 OR referee_id is NULL #is null is needed if there is no referee_id


################################################################################################
## 586: Customer Placing the largest number of orders                                         ##
## Write an SQL query to find the customer_number for the customer who has placed the largest ##
## number of orders.                                                                          ##
## The test cases are generated so that exactly one customer will have placed more orders     ##
## than any other customer.                                                                   ##
#################################################################################################
SELECT customer_number
FROM orders
GROUP BY customer_number
ORDER BY COUNT(*) DESC
LIMIT 1


########################################################################
## 511: Game Play Analsis 1                                           ##
## Write an SQL query to report the first login date for each player. ##
########################################################################
SELECT player_id, min(event_date) first_login
FROM activity
GROUP BY player_id
