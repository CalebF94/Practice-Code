##############################################################################################
## 177: Nth Highest Salary                                                                  ##
## Write an SQL query to report the nth highest salary from the Employee table. If there is ##
## no nth highest salary, the query should report null.                                     ##
##############################################################################################
CREATE FUNCTION getNthHighestSalary(N INT) RETURNS INT
BEGIN

    # Making a variable. notice it's outside the return statement 
    DECLARE var_off_set INT DEFAULT (N - 1);
    
  RETURN (
      # Write your MySQL query statement below.
      SELECT(
        # using a sub-table to handle null values
        SELECT DISTINCT salary
        FROM employee
        ORDER BY salary DESC
        Limit var_off_set, 1
      ) getNthHighestSalary
      
  );
END


################################################################################################################################################
## 178: Rank Scores                                                                                                                           ##
## Write an SQL query to rank the scores. The ranking should be calculated according to the following rules:                                  ##
##                                                                                                                                            ##
## The scores should be ranked from the highest to the lowest.                                                                                ##
## If there is a tie between two scores, both should have the same ranking.                                                                   ##
## After a tie, the next ranking number should be the next consecutive integer value. In other words, there should be no holes between ranks. ##
## Return the result table ordered by score in descending order.                                                                              ##
################################################################################################################################################
SELECT 
    score,
    DENSE_RANK() OVER(ORDER BY score DESC) as `rank` # Not sure why, but I had to put rank in backward quotes
FROM scores


############################################################################################
## 180: Consecutive Numbers                                                               ##
## Write an SQL query to find all numbers that appear at least three times consecutively. ##
############################################################################################
WITH new_log AS (
    SELECT 
        id,
        num,
        LEAD(num, 1) OVER(ORDER BY id) next_num, #Window function to find the following nums
        LEAD(num, 2) OVER(ORDER BY id) next_next_num
    FROM 
        logs
) 
SELECT DISTINCT(num) as ConsecutiveNums
FROM new_log
WHERE
    num = next_num AND
    num = next_next_num
    
#####################################################################################
## 184: Department Highest Salary                                                  ##
## Write an SQL query to find employees who have the highest salary in each of the ## 
## departments.                                                                    ##
#####################################################################################
SELECT 
    dept.name Department,
    emp.name Employee,
    emp.salary Salary
FROM
    employee emp INNER JOIN department dept
    ON emp.departmentid = dept.id
WHERE 
    (dept.id, emp.salary) IN (SELECT departmentID, MAX(salary) Salary #subquery returning the maximum salary for each dept
                              FROM employee
                              GROUP BY departmentID)
    
